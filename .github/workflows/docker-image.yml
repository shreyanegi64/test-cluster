name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  check_files:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Ensure we have enough commit history
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      run: docker login -u ${{ secrets.DOCKER_USERNAME_DATAOS }} -p ${{ secrets.DOCKER_PASSWORD_DATAOS }}

    - name: Pull Docker image
      run: docker pull rubiklabs/dataos-ctl:2.10.9-dev

    - name: Run Docker container
      run: docker run rubiklabs/dataos-ctl:2.10.9-dev

    - name: Get commit author
      id: get_author
      run: |
        commit_author=$(git log -1 --format='%an')
        echo "Commit author is $commit_author"
        echo "author=$commit_author" >> $GITHUB_ENV

    - name: Set API Key and User ID
      id: set_env
      run: |
        if [ "${{ env.author }}" == "shreya negi" ]; then
          echo "USER_ID=${{ secrets.SHREYA_USERNAME }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.SHREYA_API_KEY }}" >> $GITHUB_ENV
        elif [ "${{ env.author }}" == "itsyourdj" ]; then
          echo "USER_ID=${{ secrets.DEEPAK_USERNAME }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.DEEPAK_API_KEY }}" >> $GITHUB_ENV
        elif [ "${{ env.author }}" == "kanak_gupta" ]; then
          echo "USER_ID=${{ secrets.KHUSHI_USERNAME }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.DEEPAK_API_KEY }}" >> $GITHUB_ENV
        elif [ "${{ env.author }}" == "chenna_kesava" ]; then
          echo "USER_ID=${{ secrets.CHENNA_USERNAME }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.CHENNA_API_KEY }}" >> $GITHUB_ENV
        elif [ "${{ env.author }}" == "moneeshtmdc" ]; then
          echo "USER_ID=${{ secrets.MONEESH_USERNAME }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.MONEESH_API_KEY }}" >> $GITHUB_ENV
        else
          echo "Unknown author. Exiting."
          exit 1
        fi

    - name: List changed files
      id: list_changed_files
      run: |
        previous_commit=$(git rev-parse HEAD~1)
        current_commit=$(git rev-parse HEAD)
        echo "Previous commit: $previous_commit"
        echo "Current commit: $current_commit"

        echo "Listing changed files between the previous and current commit..."
        changed_files=$(git diff --name-only $previous_commit $current_commit | grep -E '\.(yaml|yml)$')
        
        if [ -n "$changed_files" ]; then
          echo "Changed files:"
          echo "$changed_files"
          echo "$changed_files" > changed_files.txt
        else
          echo "No files changed in the last commit."
          echo "No files changed" > changed_files.txt
        fi

    - name: Identify deleted files
      id: find_deleted_files
      run: |
        git log --diff-filter=D --summary | grep delete > deleted_files.txt
        cat deleted_files.txt
        
        # if [ -s deleted_files.txt ]; then
        #   echo "Deleted files detected:"
        #   cat deleted_files.txt
        #   echo "##[set-output name=deleted_files;]$(cat deleted_files.txt | awk '{print $2}' | tr '\n' ' ')"
        # else
        #   echo "No deleted files detected"
        #   echo "##[set-output name=deleted_files;]none"

    - name: Delete resources
      id: delete-resources
      run: |
        if grep -q . changed_files.txt; then
          for file in $(cat changed_files.txt); do
            echo "Deleting resource using file: $file"
            docker run --rm -i \
              -v $GITHUB_WORKSPACE/.dataos:/dataos \
              -v $GITHUB_WORKSPACE:/jobsfolder \
              -e DATAOS_CONFIG_DIRECTORY=/dataos \
              -e USER_ID=${{ env.USER_ID }} \
              -e DATAOS_PRIME_APIKEY=${{ secrets.DATAOS_PRIME_APIKEY }} \
              -e LICENSE_KEY=${{ secrets.LICENSE_KEY }} \
              -e LICENSE_ORGANIZATION_ID=${{ secrets.LICENSE_ORGANIZATION_ID }} \
              -e DATAOS_FQDN=liberal-donkey.dataos.app \
              -e APIKEY=${{ env.API_KEY }} \
              rubiklabs/dataos-ctl:2.10.9-dev delete -f /jobsfolder/$file
          done
        else
          echo "No resources to delete."
        fi
      continue-on-error: true
      env:
        USER_ID: ${{ env.USER_ID }}
        API_KEY: ${{ env.API_KEY }}

    - name: Check delete result
      if: steps.delete-resources.outcome == 'failure'
      run: |
        echo "Initial delete failed. Waiting for 30 seconds and retrying..."
        sleep 30
        echo "Retrying delete..."
        if grep -q . changed_files.txt; then
          for file in $(cat changed_files.txt); do
            docker run --rm -i \
              -v $GITHUB_WORKSPACE/.dataos:/dataos \
              -v $GITHUB_WORKSPACE:/jobsfolder \
              -e DATAOS_CONFIG_DIRECTORY=/dataos \
              -e USER_ID=${{ env.USER_ID }} \
              -e DATAOS_PRIME_APIKEY=${{ secrets.DATAOS_PRIME_APIKEY }} \
              -e LICENSE_KEY=${{ secrets.LICENSE_KEY }} \
              -e LICENSE_ORGANIZATION_ID=${{ secrets.LICENSE_ORGANIZATION_ID }} \
              -e DATAOS_FQDN=liberal-donkey.dataos.app \
              -e APIKEY=${{ env.API_KEY }} \
              rubiklabs/dataos-ctl:2.10.9-dev delete -f /jobsfolder/$file
          done
        else
          echo "No resources to delete."
        fi
      env:
        USER_ID: ${{ env.USER_ID }}
        API_KEY: ${{ env.API_KEY }}

    - name: Apply configuration
      run: |
        if grep -q . changed_files.txt; then
          for file in $(cat changed_files.txt); do
            echo "Applying configuration using file: $file"
            docker run --rm -i \
              -v $GITHUB_WORKSPACE/.dataos:/dataos \
              -v $GITHUB_WORKSPACE:/jobsfolder \
              -e DATAOS_CONFIG_DIRECTORY=/dataos \
              -e USER_ID=${{ env.USER_ID }} \
              -e DATAOS_PRIME_APIKEY=${{ secrets.DATAOS_PRIME_APIKEY }} \
              -e LICENSE_KEY=${{ secrets.LICENSE_KEY }} \
              -e LICENSE_ORGANIZATION_ID=${{ secrets.LICENSE_ORGANIZATION_ID }} \
              -e DATAOS_FQDN=liberal-donkey.dataos.app \
              -e APIKEY=${{ env.API_KEY }} \
              rubiklabs/dataos-ctl:2.10.9-dev apply -f /jobsfolder/$file -l
          done
        else
          echo "No files to apply."
        fi
      env:
        USER_ID: ${{ env.USER_ID }}
        API_KEY: ${{ env.API_KEY }}

    - name: Apply configuration without linter
      run: |
        if grep -q . changed_files.txt; then
          for file in $(cat changed_files.txt); do
            echo "Applying configuration (without linter) using file: $file"
            docker run --rm -i \
              -v $GITHUB_WORKSPACE/.dataos:/dataos \
              -v $GITHUB_WORKSPACE:/jobsfolder \
              -e DATAOS_CONFIG_DIRECTORY=/dataos \
              -e USER_ID=${{ env.USER_ID }} \
              -e DATAOS_PRIME_APIKEY=${{ secrets.DATAOS_PRIME_APIKEY }} \
              -e LICENSE_KEY=${{ secrets.LICENSE_KEY }} \
              -e LICENSE_ORGANIZATION_ID=${{ secrets.LICENSE_ORGANIZATION_ID }} \
              -e DATAOS_FQDN=liberal-donkey.dataos.app \
              -e APIKEY=${{ env.API_KEY }} \
              rubiklabs/dataos-ctl:2.10.9-dev apply -f /jobsfolder/$file
          done
        else
          echo "No files to apply."
        fi
      env:
        USER_ID: ${{ env.USER_ID }}
        API_KEY: ${{ env.API_KEY }}

    env:
      DATAOS_PRIME_APIKEY: ${{ secrets.DATAOS_PRIME_APIKEY }}
      LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
      LICENSE_ORGANIZATION_ID: ${{ secrets.LICENSE_ORGANIZATION_ID }}
      DOCKER_USERNAME_DATAOS: ${{ secrets.DOCKER_USERNAME_DATAOS }}
      DOCKER_PASSWORD_DATAOS: ${{ secrets.DOCKER_PASSWORD_DATAOS }}
